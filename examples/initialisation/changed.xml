<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="sequence" table-class="display" order="9">

<css lib="datatables rowreorder" />
<js lib="jquery datatables rowreorder">
<![CDATA[

var table = $('#example').DataTable({
	rowReorder: true
});

table.on('pre-row-reorder row-reorder-canceled row-reorder', function (e, node, index) {
	$('#result').html('Reordering has not started yet.');
});

table.on('row-reorder-changed', function (e, { insertPlacement, insertPoint }) {
	$('#result').html('Row moved ' + insertPlacement + ' row index ' + insertPoint);
});

]]>
</js>

<js-vanilla>
<![CDATA[

let table = new DataTable('#example', {
	rowReorder: true
});

table.on('pre-row-reorder row-reorder-canceled row-reorder', function (e, node, index) {
	document.querySelector('#result').textContent = 'Reordering has not started yet.';
});

table.on('row-reorder-changed', function (e, { insertPlacement, insertPoint }) {
	document.querySelector('#result').textContent =
		`Row moved ${insertPlacement} row index ${insertPoint}`;
});

]]>
</js-vanilla>

<title lib="RowReorder">Changed event</title>

<info><![CDATA[

This examples shows how the row-reorder-changed event can be listened for and an action taken when it is triggered. In this case we simply output data about the change to the page, but a more sophisticated use case might involve using i.e. recalculating odd / even classes for the rows.
]]></info>

<demo-html>
	<div id="result" class="box">Reordering has not started yet.</div>
</demo-html>

</dt-example>

