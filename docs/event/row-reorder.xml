<?xml version="1.0" encoding="UTF-8" ?>
<dt-event library="RowReorder">
	<name>row-reorder</name>
	<summary>Rows have been reordered by the end user</summary>
	<since>1.0.0</since>

	<type type="function">
		<signature>function( e, details, edit )</signature>
		<parameter type="object" name="e">
			jQuery event object
		</parameter>
		<parameter type="array" name="details">
			An array of change objects for the row's how have had values effected. Each object contain the following properties:

			* `-type *` `newData` - The new data value for the row (data point defined by `rr-init rowReorder.dataSrc`)
			* `-type node` `node` - The `-tag tr` element
			* `-type integer` `newPosition` - New index in the DOM
			* `-type *` `oldData` - The old data value for the row
			* `-type integer` `oldPosition` - Old index in the DOM
		</parameter>
		<parameter type="object" name="edit">
			This parameter provides the information required for [Editor](//editor.datatables.net) to perform a multi-row edit:

			* `-type string` `dataSrc` - Data point - typically the field to be edited (defined by `rr-init rowReorder.dataSrc`)
			* `-type array` `nodes` - The rows to be edited
			* `-type object` `values` - The new values in a format suitable for `e-api multiSet()`.
			* `-type DataTable.Api` `triggerRow` (Since v1.1.0) - Row API instance for the row that was used to start the reorder (i.e. the result from `dt-api row()`).
			* `-type object` `originalEvent` (Since v1.2.6) - The original event (mouseup) that triggered the reorder.
		</parameter>
		<scope>HTML table element</scope>
	</type>

	<description>
		When using RowReorder you will likely wish to know when a table has been reordered by an end user so you can update a data store to reflect these changes. This event provides that ability.

		The data that has been changed by RowReorder is given in two different forms in the parameters for the event handler callback - one with detailed information about the individual rows, and one with data in a format suitable for [Editor's](//editor.datatables.net) multi-row editing feature.

		This event is triggered when a row is dropped, but prior to the new data being written to the database.

		As of RowReorder 1.4.1 this event is cancellable by returning `false` from the event handler function. If there are multiple event handlers, the last non-`undefined` return value will be used as the return value after all event handlers have been executed in order.

		Please note that, as with all DataTables emitted events, this event is triggered with the `dt` namespace. As such, to listen for this event, you must also use the `dt` namespace by simply appending `.dt` to your event name, or use the `dt-api on()` method to listen for the event which will automatically append this namespace.
	</description>

	<example title="Add a class to all changed rows"><![CDATA[

var table = $('#example').DataTable( {
	rowReorder: true
} );

table.on( 'row-reorder', function ( e, diff, edit ) {
	for ( var i=0, ien=diff.length ; i<ien ; i++ ) {
		$(diff[i].node).addClass("reordered");
	}
} );

]]></example>

	<example title="Use Editor's multi-row editing to update a database on row reorder"><![CDATA[

table.on( 'row-reorder', function ( e, details, changes ) {
	editor
		.edit( changes.nodes, false, {
			submit: 'changed'
		} )
		.multiSet( changes.dataSrc, changes.values )
		.submit();
} );

]]></example>
</dt-event>